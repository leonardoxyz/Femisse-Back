## üß† **Regras Gerais de Comportamento da IA**

1. **An√°lise de Codebase:**
   Sempre no in√≠cio da conversa, a IA deve propor uma **an√°lise completa da codebase**, incluindo depend√™ncias, estrutura de pastas, design patterns e padr√µes de commit existentes, antes de iniciar qualquer implementa√ß√£o.

2. **Contexto de Projeto:**
   A IA deve compreender se est√° atuando em ambiente **DEV, STAGING ou PROD**, adaptando os comandos e boas pr√°ticas a cada contexto.

3. **Comunica√ß√£o T√©cnica:**
   Todas as explica√ß√µes e logs devem ser objetivos, em **ingl√™s t√©cnico** e com foco em **a√ß√£o e resultado** (sem mensagens gen√©ricas).

4. **Linguagem e Frameworks:**
   O backend usa **Node.js**, **Express**, **TypeScript** e **Prisma** (ou ORM equivalente). A IA deve assumir esse stack como padr√£o salvo instru√ß√£o contr√°ria.

---

## ‚öôÔ∏è **Regras de Execu√ß√£o e Ambientes**

5. **Porta Padr√£o:**
   Sempre tente executar a aplica√ß√£o na porta **localhost:4000**.

   * Se a porta estiver ocupada, execute o seguinte comando PowerShell para liber√°-la:

     ```powershell
     Get-Process -Id (Get-NetTCPConnection -LocalPort 4000).OwningProcess | Stop-Process -Force
     ```
   * Em seguida, tente novamente iniciar o servidor.

6. **Encerramento de Processos:**

   * A IA s√≥ pode encerrar **processos vinculados √† porta 4000**.
   * Nunca deve matar processos gen√©ricos do sistema.

7. **Builds e Commits:**

   * Antes de qualquer commit, garanta que o comando `npm run build` ou `tsc --noEmit` seja executado **sem erros**.
   * **Nunca** fa√ßa commit automaticamente ap√≥s cada modifica√ß√£o ‚Äî somente quando o usu√°rio solicitar explicitamente.

8. **Logs de Commit:**

   * As mensagens de commit devem ser **curtas, descritivas e em ingl√™s**, no formato convencional:

     ```
     feat: add new endpoint for product filtering
     fix: correct null reference in order service
     refactor: optimize cart total calculation
     ```

9. **Arquivos Ignorados:**

   * Sempre ignore arquivos de log (`server.log`, `combined.log`, `npm-debug.log`) e diret√≥rios tempor√°rios no commit.

---

## üß± **Boas Pr√°ticas de Arquitetura e C√≥digo**

10. **Princ√≠pios SOLID:**
    Todo o c√≥digo deve obedecer rigorosamente aos princ√≠pios **SOLID**, evitando acoplamento excessivo e promovendo a responsabilidade √∫nica.

11. **Evitar Duplica√ß√£o:**
    Nunca gerar c√≥digo duplicado. Se detectar duplicidade, sugerir refatora√ß√£o imediata com **reutiliza√ß√£o de servi√ßos, middlewares ou utilit√°rios** existentes.

12. **Design Patterns Recomendados:**

    * Use **Repository Pattern** para acesso a dados.
    * Use **Service Layer Pattern** para regras de neg√≥cio.
    * Use **Dependency Injection** sempre que poss√≠vel.
    * Prefira **Factory**, **Strategy**, **Adapter** ou **Observer** conforme a necessidade.

13. **Tratamento de Erros:**

    * Nunca use `try/catch` sem tratamento concreto.
    * Logar apenas n√£o √© tratamento ‚Äî implemente **retry**, **fallback**, ou **propaga√ß√£o controlada** do erro.
    * Todos os erros devem ser capturados por um **middleware global de erro**.

14. **Logs e Observabilidade:**

    * N√£o utilizar `console.log`, `console.error` ou `console.warn`.
    * Utilize um sistema de logging estruturado (ex: **Winston**, **Pino**, ou **Bunyan**) com n√≠veis (`info`, `warn`, `error`, `debug`).

15. **Performance e Otimiza√ß√£o:**

    * Use consultas otimizadas (ex: `select` e `include` espec√≠ficos no Prisma).
    * Evite loops desnecess√°rios e opera√ß√µes s√≠ncronas bloqueantes.
    * Prefira sempre opera√ß√µes **ass√≠ncronas** e **lazy loading** quando aplic√°vel.

---

## üõ°Ô∏è **Seguran√ßa**

16. **Valida√ß√£o e Sanitiza√ß√£o:**

    * Sempre validar e sanitizar dados de entrada antes de processar requisi√ß√µes.
    * Use bibliotecas como `zod`, `joi`, ou `class-validator`.

17. **Prote√ß√£o contra Inje√ß√µes:**

    * Nunca construir queries SQL manualmente.
    * Sempre usar ORM seguro com **bindings parametrizados**.

18. **Headers e CORS:**

    * Assegurar que as rotas tenham configura√ß√£o adequada de CORS, com origens permitidas expl√≠citas.
    * Nunca utilizar `Access-Control-Allow-Origin: *` em produ√ß√£o.

19. **Autentica√ß√£o e Autoriza√ß√£o:**

    * Use JWT com expira√ß√£o curta e refresh tokens.
    * Nunca exponha tokens, senhas ou segredos no c√≥digo-fonte.
    * Proteja endpoints sens√≠veis com middlewares de role checking.

20. **Rate Limiting e Prote√ß√£o Anti-DDOS:**

    * Adicione prote√ß√£o b√°sica com `express-rate-limit`.
    * Implemente cache (Redis, por exemplo) para requisi√ß√µes intensivas.

---

## üìú **Documenta√ß√£o e Qualidade**

21. **Swagger / OpenAPI:**

    * Toda vez que criar ou modificar um endpoint, adicione ou atualize a documenta√ß√£o Swagger com **JSDoc e a tag `@swagger`**.
    * Reinicie o servidor e confirme a atualiza√ß√£o em `/swagger`.
    * Falta de documenta√ß√£o = tarefa incompleta.

22. **Testes Automatizados:**

    * Cada implementa√ß√£o deve incluir **testes unit√°rios** e **de integra√ß√£o**.
    * Os testes devem rodar com `npm test` sem falhas antes de qualquer commit.
    * Use `jest` ou `vitest`, com cobertura m√≠nima de 80%.

23. **Lint e Formata√ß√£o:**

    * Execute `npm run lint` antes do commit.
    * O c√≥digo deve seguir o padr√£o **ESLint + Prettier**, sem warnings ou erros.

24. **Coment√°rios e Legibilidade:**

    * Coment√°rios devem ser t√©cnicos e objetivos.
    * Nenhum c√≥digo deve conter coment√°rios redundantes ou deixados como ‚ÄúTODO‚Äù indefinidamente.

25. **Nomenclaturas:**

    * Usar nomes consistentes e descritivos (ex: `userService`, `productRepository`).
    * Nunca use abrevia√ß√µes confusas ou gen√©ricas (`data`, `tmp`, `val`).

---

## üß∞ **Manuten√ß√£o e Automa√ß√£o**

26. **Scripts do NPM:**

    * Padronize scripts: `start`, `dev`, `build`, `test`, `lint`, `seed`, `swagger:update`.
    * Nunca criar scripts duplicados ou com nomes amb√≠guos.

27. **Env Files:**

    * Vari√°veis sens√≠veis devem estar em `.env` e nunca versionadas.
    * A IA deve sempre checar a exist√™ncia de `.env.example` atualizado.

28. **CI/CD:**

    * Garanta que o pipeline de build/test passe antes de sugerir merge.
    * Automatize verifica√ß√µes de lint, test e build no pipeline.

29. **Migra√ß√µes e Banco de Dados:**

    * Toda altera√ß√£o de schema deve ter migra√ß√£o correspondente (`prisma migrate dev`).
    * Nunca editar o banco manualmente.

30. **Versionamento de API:**

    * Sempre versionar rotas REST (`/api/v1/...`).
    * Ao criar endpoints novos, mantenha compatibilidade retroativa.

---

## üß© **Comportamentos Proibidos**

31. ‚ùå Nunca:

* Usar `any` sem justificativa.
* Usar vari√°veis globais para persist√™ncia.
* Alterar c√≥digo de terceiros diretamente (exceto configura√ß√£o expl√≠cita).
* Fazer push ou commit autom√°tico.
* Usar depend√™ncias obsoletas sem valida√ß√£o de seguran√ßa.

32. ‚úÖ Sempre:

* Refatorar o c√≥digo duplicado.
* Validar logs e erros antes de commit.
* Garantir que o c√≥digo seja **perform√°tico, seguro e limpo**.
